* Literate Paradigm Configuration File for Emacs - May 2019.
#+Time-stamp: <2019-05-19 19:50:04 rf343>

** Introduction.

*** TODO - description of what literate programming is and how it works
with Emacs and Org-mode.

** Information About Document Structure.

*** TODO - How document is broken down. Initial thoughts.

- Configuration required to get other things working.

- Appearance
    Set theme/appearance
    Set modeline theme
    Font configuration

- Programming
  - C/C++
    Python
    Clojure

- Text editing
  - HTML
    LaTeX
    Spell checking
    Text linting

** Package Management.

Over the years I have been using Emacs I have had to deal with various
approaches to the issue of plug-ins and packages.  For a long time it
seemed you had to download the code and unpack it somewhere
appropriate, then link that location in the configuration file,
compile the code etc. And while it worked almost all the time, it was
often messy, and if there were dependencies they had to be resolved
manually.

When I decided to start running the cutting edge Emacs versions (self
compiled) I decided that I should run the latest versions of the
packages as well and started pulling everything from their various Git
repositories. This worked quite well, and I could run a simple bash
process to update the packages as required, essentially walking the
folders and running 'git pull' for each package, and then recompiling
as required. It worked, but it was unneccesarily fiddly!

Then, along came the package repositories. These online stores provide
regularly updated lists of curated packages. The first block of code
below plumbs in the 'Melpa' repository. The packages may not be quite
as up to date as the Git repositories (though they are close) but
updating them is much simpler, involving running
'packages-list-packages', loading the package list, hitting u (update)
which will identify the packages for which there are updates, and the
x (eXecute) to update the packages that have an update available.

The second innovation was the 'use-package' plug-in. This allows
automatic installation of packages by giving '(use-package packname)'
in the code.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

Modified loaded packages on 10th May 2019. Melpa Stable appeared not
to contain Palimpsest, so I have moved to non-stable Melpa.

*** TODO Comment on moving from stable to 'normal' Melpa repository and how a package upgrade request then required 26 packages updated.

#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC

** Appearance.

Out of the box Emacs isn't ugly, it is just staid. And it uses a lot
of screen real-estate which I can put to better use.

*** Reclaiming Screen Real-Estate.

Start by removing the unneccesary menu bar and tool bar from the top
of the screen and the scroll bar on the right hand side. Once that is
done I'll know the initialisation is working and I can commit the
first configuration.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)			; Turn off menu bar
  (tool-bar-mode 0)			; Turn off tool bar
  (blink-cursor-mode 0)			; Stop cursor blinking
  (scroll-bar-mode 0)			; Don't need the scrollbar
  (display-time-mode 1)			; Do put time in mode line.
#+END_SRC

*** Switch Off the Start-Up Message.

I know that I'm using Emacs, I just started the program, so I don't
need to be reminded of that fact. This code switches off the start-up
message.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)	; switch off splash screen.
#+END_SRC

*** Set A Nice Font.

If you are going to spend a lot of time looking at text, you might as
well make sure that it is a pleasant font to look at.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
		      :font "Inconsolata Medium"
		      :height 85)	; height 85 slightly easier to read.
#+END_SRC

There was a long discussion on Reddit (/r/emacs) about preferred fonts
for programming and the like. I think I like the font, but I may go
for a larger size.

TODO - track down the discussion and look at alternative recommendations.

*** Highlight the Current Line.

To help guide the eye when writing Emacs supports highlighting of the
current line (the line where the cursor is).

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)			; highlight current line.
#+END_SRC

This highlighting is reliant on the colour scheme being used within
Emacs, so isn't always as useful as it is in this default setup where
the highlighted line has a green background against the white of the
rest of the screen.
*** Line Numbering.

As files get longer, being able to refer to a location by its line
number becomes more desirable.  This is especially the case when I
start dabbling in programming as it will help locate errors which I
will, inevitably make.

#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
#+END_SRC

*** Colour Theme.

Cyberpunk theme - first installation from Melpa using use-package.

#+BEGIN_SRC emacs-lisp
  (use-package cyberpunk-theme	;
    :ensure t)
#+END_SRC
*** Rainbow Delimiters.

On its surface, this functionality can appear to be just a bit of
prettiness, but the functionality is somewhat useful. When using a lot
of brackets (think Clojure/Lisp) it can be tricky to keep track of the
brackets.  Rainbow Delimiters uses a different colour for each pair of
brackets, making it easier to see which brackets match.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook 'LaTeX-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook 'text-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook 'org-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

TODO This function also needs to be married to the electric pairs behaviour
so that brackets are created in pairs.

*** Doom Modeline.

This is a look and feel configuration that really packs a punch and
makes Emacs look a lot more modern than before.  Doom Modeline
supports its own range of themes which could be experimented with at
some point.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)		; install 'all the icons' package
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
  (use-package doom-themes
    :ensure t
    :config (load-theme 'doom-dracula t))
#+END_SRC
*** Display text in scratch buffer at start-up.

I have switched off the standard Emacs 'splash screen' which is
normally displayed when you start Emacs. However, I don't want to just
be left with the dull generic text.

Instead, I want to be greeted by text specific to the machine I am
using Emacs on.  The machines are:

- Home laptop - ziggy-latitude
- Psychology desktop - psychol-ford
- Plant Sci desktop - plantsci-cowin01

Emacs can run code on the basis of the system name using a look-up on
the variable 'system-name'. According to the variable description
system-name is defined in 'C source code', but this variable is
obsolete in Emacs after version 25.1. I will experiment and see in
(system-name) works in the same way.

#+BEGIN_SRC emacs-lisp
  ;; ziggy-latitude - my home laptop (an old dell latitude running Mint Linux)
  (if (string=(system-name) "ziggy-latitude")
      (setq initial-scratch-message
	    "I use Emacs, which might be thought of as a thermonuclear word processor.\n\nNeal Stephenson - \n\tIn The Beginning... Was the Command Line"))
  ;; psychol-ford - Psychology desktop
  (if (string=(system-name) "psychol-ford")
      (setq initial-scratch-message
	    "'Space,' it says, 'is big. Really big. You just wont't believe how vastly, hugely, mindbogglingly big it is.
  \nI mean, you may think it's a long way down the road to the chemist, but that's just peanuts to space.'\n\nHitch Hiker's Guide To The Galaxy\n\tDouglas Adams."))
  ;; plantsci-cowin01 - Plant Sciences desktop
  (if (string=(system-name) "plantsci-cowin01")
      (setq initial-scratch-message
	    "The most exciting phrase to hear in science, the one that heralds the most discoveries is\nnot 'Eureka!' (I have found it!), but 'That's funny...'\n\n Isaac Asimov"))
  ;; ziggypi - my home Raspberry Pi - needs testing.
  (if (string=(system-name) "ziggypi")
      (setq initial-scratch-message
	    "I see you are logged into a Raspberry Pi. Welcome."))
  #+END_SRC

** Version Control.

*** TODO Magit - Git Porcelain for Emacs.

One of the 'killer apps' of Emacs is its Git supporting plug-in
'Magit'. It describes itself as a git porcelain (no, I don't know why
either!).

Magit is definitely a great way to manage Git repositories, and you
can do most things from within Emacs itself. I'm still getting to
grips with the functionality, but the effor feels worth it.

*** Magit Dependencies.

Before installing Magit itself, you need to take care of some
dependencies.

**** Dash

#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t)
#+END_SRC

**** Magit Pop-up

#+BEGIN_SRC emacs-lisp
  (use-package magit-popup
    :ensure t)
#+END_SRC

**** With Editor

#+BEGIN_SRC emacs-lisp
  (use-package with-editor
    :ensure t)
#+END_SRC

**** ghub

#+BEGIN_SRC emacs-lisp
  (use-package ghub
    :ensure t)
#+END_SRC

*** Magit itself

After all that, I can then get around to installing Magit itself. The
installation command is simple, but the configuration command binds
C-x g to 'magit status' which is the equivalent of git status. This
shows which files are unstaged, staged or untracked.

A lot of the commands in Magit are two steps. To view the log hit l
and then follow up appropriately. Hitting l again will give the log of
your currently checked out branch. Hitting b will display all the
branches.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

*** Magit Documentation.

Magit is complex, so documentation needs to be at hand.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'info
    (info-initialize)
    (add-to-list 'Info-directory-list
		 "~/.emacs.d/elpa/magit-2.90.1/dir/"))
#+END_SRC
*** TODO Magit Other Functions Investigation
Magit isn't limited to just managing simple version control. There are
lots of extensions of Magit. One of the most interesting sounding
being Magit ToDo which managed TODO in Org files. This needs
investigation.
*** Backups

By default Emacs creates a simple backup of files when editing. These
share the same file name but with an appended tilde (~) character.
This is okay, and, in those folders and projects which are under Git
control actually unnecessary, but for folders that aren't under this
level of version control it is a good idea to keep old copies of files
at each save point. This is especially the case, given that modern
systems tend to have lots of disc space, so keeping copies of these
files isn't an issue.

There are a number of variables which control how backups are kept and
managed, and the naming of the files doesn't alway do a sterling job
of indicating what they do.

**** Save Uniquified Backups To Single Location.

Rather than clogging up your working directory with backups this
configuration will save the old backups to a specified folder
elsewhere on the system.  I saw one configuration where the backup
folder is actually hidden (in the usual Unix manner, by starting with
a full stop). That way it doesn't even show up on many listings...

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.Backups/"))) ; hidden backup folder
  (setq delete-old-versions t)				    ; delete old versions silently
  (setq kept-new-versions 6)				    ; no. of new versions to keep
  (setq kept-old-versions 2)				    ; no. of old versions to keep.
  (setq version-control t)				    ; create numbered backups
  (setq vc-make-backup-files t)				    ; backup even version controlled files.
  (setq auto-save-file-name-transforms '((".*" "~/.Backups/" t))) ; uniquify saved names
#+END_SRC

This code block does the following:

- Sets the location for backups to be saved to (now ~/.Backups/)
- Sets the system to remove old versions (need to set upper and lower limits)
- Backup files even if they are under version control
- Process the file names that are used for backup so they are
  unique. The actual process is to take the full path of the file and
  convert all forward slashes into exclamation marks. The fact that
  the path is, by definition unique means the backups will be as well.
** General Behaviour.

These settings are the sort of thing that has a general effect on all
areas of using the editor.  Things like word wrapping and being able
to respond to queries using y/n rather than yes/no. These are not
specific to a particular activity or mode.

*** White Space Trimmming.

When a file is saved, this function is called and trims any excess
white space at the end of the file.  There are more aggressive
versions of this function which will strip out white space throughout
the document but I don't need that sort of functionality.

Wike article on the subject:

https://www.emacswiki.org/emacs/DeletingWhitespace

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Answering yes/no Questions with Y/N.

Honestly, this is the 21st Century, who has time to type yes/no when
y/n will do the job? This is especially obvious when you do things
like 'kill-some-buffers' with the intention of closing a load of
windows one after the other. Having to type yes/no in that process
defeats the whole process.

More information on the wiki at:

https://www.emacswiki.org/emacs/YesOrNoP

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Word Wrapping.

By default Emacs doesn't wrap the text entered.  This is obviously
nonsense in every circumstance, so this code block activates work
wrapping.

Information on word wrapping:

https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Fill.html

Instructions on activating word wrapping (auto-fill-mode) here:

https://www.gnu.org/software/emacs/manual/html_node/efaq/Turning-on-auto_002dfill-by-defau│lt.html

It is worth noting that the word wrap happens when the line length
reaches a certain point. After that Emacs won't automatically try and
reflow the text a second time (cf. Word and other WYSIWYG editors).
As this is the case there are a couple of handy commands to refill
text and deal with the issue. These are described here:

https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Commands.html#Fill-Commands

Most useful:

- M-q : fill the current paragraph. Note that a paragraph is defined
  as having a blank line between it and its neighbours. If there is no
  blank line then the paragraphs are treated as one and will be melded
  together.

- C-u 2 M-q : Fill the paragraph but justify both the right and left
  edges, not just the left hand one.

An example of the difference:

This is some text which I am going to format with a ragged right hand
edge.  The content of the paragraph really doesn't matter, the point
is to have a few lines of random text which we can justify as
required.

This is  some text which  I am going to  format with a  straight right
hand edge.   The content of  the paragraph really doesn't  matter, the
point is to  have a few lines  of random text which we  can justify as
required.

The problem with the second block is the extra spaces introduced to
create the straight right edge. In proper typesetting the extra space
can be spread along the length of the line, but in a simple fixed
width text the gaps are going to be obvious.

Still, quite cool functionality.

The code block below activates the word wrapping (auto-fill in Emacs
speak), for specific modes. I have added entries for the following
modes:

- text

- LaTeX

- latex

- Org-mode

- Emacs Lisp

- Fundamental

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'auto-fill-mode)		; word
  (add-hook 'LaTeX-mode-hook 'auto-fill-mode)		; wrapping
  (add-hook 'latex-mode-hook 'auto-fill-mode)		; in these
  (add-hook 'org-mode-hook 'auto-fill-mode)		; various
  (add-hook 'emacs-lisp-mode-hook 'auto-fill-mode)	; modes
  (add-hook 'fundamental-mode-hook 'auto-fill-mode)		;
  (add-hook 'prog-mode-hook 'auto-fill-mode)
#+END_SRC

I don't think I will need to set a default mode now as all the
important ones are covered.

*** Recent Files.

A standard part of many programs, and operating systems, is to provide
quick access to files which have been opened recently. Emacs supports
this functionality via 'recentf'.

To view the list of files available having turned off the menu bar,
the command is:

M-x recentf-open-files

The code block provides a shortcut for this function so you can use:

C-x C-r

No-one is going to miss the original use of this shortcut which is to
open a file in read-only mode!

The ten most recent files can be selected simply by entering the
relevant digit (1-0). Other entries can be selected by highlighting
the required file and hitting return.

#+BEGIN_SRC emacs-lisp
  (require 'recentf)			; Ensure recentf is loaded
  (setq recentf-save-file '"~/.Backups/recentf") ; put recentf in ~/.Backups folder
  (recentf-mode 1)			; and activated
  (setq recentf-max-menu-items 25)	; Define how many recent entries to store
  (global-set-key "\C-x\ \C-r" 'recentf-open-files) ; map to key binding.
  (run-at-time nil (* 5 60) 'recentf-save-list)	  ; save list of recentf files every 5 minutes
#+END_SRC

The output when I hit C-x C-r as of writing this is:

  [1] /home/richard/.emacs.d/config.org
  [2] /home/richard/.emacs.d/recentf
*** Saving Your Place.

As files get longer it is useful to be able to open a file and return
to the same location as you were at when you closed the file or
shutdown the program.  This doesn't require any special commands, it
just stores the information in the ~/.Backups/ folder.

#+BEGIN_SRC emacs-lisp
  (setq save-place-file '"~/.Backups/places") ; put places file in ~/.Backups folder
  (save-place-mode 1)
#+END_SRC
*** Helm Configuration.

Helm is another of those plug-ins which some people just consider
central to the Emacs experience.  I have to admit it is growing on me,
especially when I use it to filter down options very quickly.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
	   ("M-<f5>" . helm-find-files)
	   ([f10] . helm-buffers-list)
	   ([S-f10] . helm-recentf))
    :config (helm-mode 1)
    :config (global-set-key (kbd "C-x C-f") 'helm-find-files))
#+END_SRC

*** TODO Investigate what other things Helm can do.
*** Setting Default Mode.

In almost every mode I now have auto-fill activated. This works in Org
mode etc, no problem. But when I am editing emails in Emacs (as I have
configured to do with Evolution) the buffer that is used is
'Fundamental' mode and this doesn't do word wrapping.

So I am setting the default mode appropriately.

#+BEGIN_SRC emacs-lisp
  (setq-default major-mode 'text-mode)
#+END_SRC

*** Time Stamping Files.

Emacs provides a simple function to complete a timestamp within
documents. This function relies on the string:

Time-stamp: " "

or

Time-stamp: < >

being present in the first eight lines of the document. Note that
there is a space between the speechmarks or angle brackets.

The following code block calls the time-stamp function whenever a file
is saved, and if the text is present the time and user information
will be inserted.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'time-stamp) ; run time-stamp when file is saved.
  (setq time-stamp-pattern nil)		 ; See the note below.
#+END_SRC

Note on 'time-stamp-pattern: This is a variable which defines the
search pattern for what the time-stamp string is. Leave it unchanged
otherwise it may affect the time-stamp updating.
*** Visual Bell.

By default Emacs will beep if you do something that doesn't make
sense. It isn't particularly intrusive, but I do want to make it a
visual notification rather than an audio one.

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC
*** Abbreviations - Saving on Typing.

**** TODO Add description text for using abbreviation mode.

**** Automatically Expanding Abbreviations.

#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode t)		; turn on abbreviation mode.
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs") ; where the abbreviations are stored.
#+END_SRC

Automatic abbreviations expand when you hit the next white space
character.

To create entries in the abbreviations file enter the abbreviation
itself and then hit either:

- C-x a i g - add inverse global abbreviation

- C-x a i l - add inverse local abbreviation

**** Dynamically Expanding Abbreviations.

**** TODO add prose  around using dynamic abbreviations.
** Org-Mode Functionality.

*** TODO Prose about Org-mode

*** TODO Investigate what else Org Mode can do.
*** Org-Mode Configuration for Babel/Code Block Support.
Set some Org-Mode functionality up so that code blocks work better.

#+BEGIN_SRC emacs-lisp
  (use-package org			; load org mode
    :ensure t
    :config (setq org-src-tab-acts-natively t)
    :config (org-babel-do-load-languages
	     'org-babel-load-languages
	     '(
	       (python . t)
	       (C . t)
	       (shell . t)
	       (latex . t)
	       ))
    ;; fontify the code in Org Mode Code Blocks
    :config (setq org-src-fontify-natively t)
    ;; Don't check before running the code.
    :config (setq org-confirm-babel-evaluate nil))
#+END_SRC

This code block sets up the fact that you can write your code in
various languages and have Org run them as you would expect. Testing
on how this works is required, but a quick Python 'Hello World'
example functions.

For Python there is a page of examples here:
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html#orgd68ccfd

#+BEGIN_SRC python :results output
  print "Hello World!"
#+END_SRC

#+RESULTS:
: Hello World!

To run the code block place the cursor in the block and hit C-c C-c.

*** Org-Mode Fancy Bullets.

**** TODO Prose about bullets.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC
** Writing Functionality.

Using a text editor can involve many different activities, from
writing prose, to coding and then editing whatever has been
entered. This section includes a number of functions which I think
enhance the process of writing text.
*** TODO Add more prose...
*** Minimap Mode.
Minimap mode is a tool which provides a 10,000 foot overview of a
buffer's structure in a window to the side of the main editing window
(by default this is to the left hand side). The minimap isn't meant to
be readable in most cases, but should give the user an idea of
whereabouts in the document you are, and the overall structure of the
file.

Code block installs and loads Minimap Mode and then sets the supported
modes to include prog-mode (the default), html-mode, org-mode,
text-mode and LaTeX modes.

#+BEGIN_SRC emacs-lisp
  (use-package minimap
    :ensure t
    :config (setq minimap-major-modes '(prog-mode html-mode org-mode text-mode LaTeX-mode latex-mode)))
  (minimap-mode 1)
#+END_SRC

**** TODO check if minimap font can be made a little bit more readable.
*** Writeroom.
When working on Linux there is a standalone 'distraction free' text
editor called FocusWriter. It is a nice program with some cool
features such as word targets and a nice look and feel. But of course
it doesn't have Emacs key bindings and things like abbreviation
mode. Fortunately Emacs provides its own distraction free editing
environment - WriteRoom.

**** WriteRoom Dependency.

There is a dependency that needs to be satisfied before installing
WriteRoom. This is 'Visual Fill Column' which is related to the
fill-mode configured elsewhere.

#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :ensure t)
#+END_SRC

**** WriteRoom Itself.

#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :ensure t)
#+END_SRC
*** Spell Checking.
While writing text even the best typist and writer needs someone
looking over their shoulder and checking their spelling.  Obviously
this needs to be done using proper English rather than American
English.  This setting takes care of that, configuring the ispell
plug-in and the use of the British dictionary.

#+BEGIN_SRC emacs-lisp
  (require 'ispell)
  (setq ispell-dictionary "british")
#+END_SRC

It is, of course, possible to do the spell checking manually, but to
be truly useful you need to do realtime spelling.  This means the use
of flyspell-mode which can be enabled for particular modes.

#+BEGIN_SRC emacs-lisp
  ;; on the fly spell checking for specific modes:-
  (add-hook 'text-mode-hook 'flyspell-mode)		; text mode
  (add-hook 'prog-mode-hook 'flyspell-mode)		; programming modes
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)		; LaTex (AucTeX) mode
  (add-hook 'latex-mode-hook 'flyspell-mode)		; latex mode
  (add-hook 'org-mode-hook 'flyspell-mode)		; Org Mode
#+END_SRC

Testing of the spell checking functionality shows that it is working
as expected.

*** Palimpsest Support.

The dictionary definition from WordNet (using dict palimpsest) is:

palimpsest:
n 1: a manuscript (usually written on papyrus or parchment) on which
more than one text has been written with the earlier writing
incompletely erased and still visible.

Palimpsest functionality in Emacs provides a function to take a
selection of text and either move it to one end of the document
(usually the end, though the top is a configurable option) or to paste
it into an external document with a suitable name related to the
parent document.  This way the removed text continues to be ready if
required later.

Palimpsest Configuration:

#+BEGIN_SRC emacs-lisp
  (use-package palimpsest
    :ensure t
    :config (add-hook 'text-mode-hook 'palimpsest-mode)
    :config (add-hook 'LaTeX-mode-hook 'palimpsest-mode)
    :config (add-hook 'latex-mode-hook 'palimpsest-mode)
    :config (add-hook 'org-mode-hook 'palimpsest-mode)
    :config (add-hook 'prog-mode-hook 'palimpsest-mode))
#+END_SRC

**** Instructions For Palimpsest Mode.

- M-x palimpsest-move-region-to-bottom

- M-x palimpsest-move-region-to-top

- M-x palimpsest-move-region-to-trash

Keyboard shortcuts are provided for moving to the bottom and to an
external file.

- C-c C-r - Send to the end of the file.

- C-c C-q - Send to the external file.

The external file name is derived from:

originalfilename.trash.originalfileextension

Content can then be retrieved with ease either from the end of the
file or from the external file.
*** Org-Journal Mode.
Rather than installing the git based journal there is an org-based
journal option to try.

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
  :ensure t
  )
#+END_SRC

**** TODO information about the org-journal mode.
**** TODO change the target folder for the journal.

*** Text Lint - On The Fly Text Checking.
When writing text it is easy to throw words into the mix which are
entirely unnecessary.  They don't add anything to the readability of
the text, and in some cases they might be considered problematic.

I originally found out about this functionality because of a post on
Reddit, but i like it.  I would like to use it and then try and hone
my writing so that I don't get picked up on stuff.

The original page is here:

https://www.macs.hw.ac.uk/~rs46/posts/2018-12-29-textlint-flycheck.html

I have modified the configuration in the original post to provide
support when using a number of different modes. This needs testing. I
have successfully used it in Markdown mode and LaTeX mode, but I'm not
sure yet if it works in Org mode etc.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config (flycheck-define-checker textlint "A linter for textlint."
				   :command ("npx" "textlint"
					   "--config" "~/.emacs.d/.textlintrc"
					   "--format" "unix"
					   "--rule" "write-good"
					   "--rule" "no-start-duplicated-conjunction"
					   "--rule" "max-comma"
					   "--rule" "terminology"
					   "--rule" "period-in-list-item"
					   "--rule" "abbr-within-parentheses"
					   "--rule" "alex"
					   "--rule" "common-misspellings"
					   "--rule" "en-max-word-count"
					   "--rule" "diacritics"
					   "--rule" "stop-words"
					   "--plugin"
					   (eval
					    (if (string="tex" (file-name-extension buffer-file-name))
						"latex"
					      "@textlint/text"))
					   source-inplace)
				   :error-patterns
				   ((warning line-start (file-name) ":" line ":" column ": "
					   (message (one-or-more not-newline)
						  (zero-or-more "\n" (any " ") (one-or-more not-newline)))
					 line-end))
				   :modes (text-mode latex-mode org-mode-markdown-mode))
				   :config (add-to-list 'flycheck-checkers 'textlint)
				   :config (add-hook 'text-mode-hook 'flycheck-mode)
				   :config (add-hook 'prog-mode-hook 'flycheck-mode)
				   :config (add-hook 'LaTeX-mode-hook 'flycheck-mode)
				   :config (add-hook 'latex-mode-hook 'flycheck-mode)
				   :config (add-hook 'org-mode-hook 'flycheck-mode)
				   :config (setq flycheck-textlint-config "~/.config/textlint/textlintrc.json"))

#+END_SRC

** Mark Up Editing.

The idea of mark up is an ancient one going back to the early printing
press.  The author of a piece of text would write the words they
wanted to publish. Then an editor would edit the words and mark them
up with instructions on how the printer should actually print the
text.  This could include indications of font size, location on the
page and any other relevant information.

Fast forward to recent developments. Thirty years ago newspapers were
still made in much the same way, and the printer was a skilled
technician, versed in spelling, reading mirror writing and handling
the type with extreme rapidity.

Then came the publishing revolution. The rise of the desktop
publishing program and word processor. For a time the separation of
the two processes (generating chunks of text and processing those
words into a beautiful document) were kept separate. Styles were still
key to the way documents were produced, the printer's arts still
persisted.

This approach to creating documents persists in markup languages like
HTML, LaTeX and Groff. It may not be on display, but learning a bit
about the way these things work is a net benefit for the author and
those interested in creating documents of beauty.

*** HTML Editing

**** TODO documentation on html usage. Also look into alternate packages.

#+BEGIN_SRC emacs-lisp
    (use-package htmlize
      :ensure t)
#+END_SRC
*** LaTeX Editing.

**** TODO setup LaTeX/AucTeX stuff.
**** TODO setup RefTeX
**** TODO setup BibTeX
**** TODO word count in LaTeX documents
** Programming Modes.
*** Clojure Mode.
Clojure is a dialect of Lisp which compiles to Java code which can be
run on Java Virtual Machines. It also supports REPLs etc.  My
experiments with this language are largely carried out in conjunction
with the book 'Clojure for the Brave and the True', but I also have an
O'Reilly book on the subject.

The instructions for working with Emacs and Clojure largely derive
from this web page:

http://clojure-doc.org/articles/tutorials/emacs.html#manual-setup

However, as I'm using use-package to carry out the installations this
is simplified a little:

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode		; Install clojure mode
    :ensure t)
  (use-package cider			; install cider
    :ensure t)
#+END_SRC

The instructions also recommends the use of Projectile in order to
navigate and manage projects, so I will look at this in the future.

**** TODO Projectile investigation.
**** TODO Test that Clojure mode works as expected

I have added Paredit to the Experimental Code section, but I'm
mentioning that fact here as it is 'bigged up' in the 'Clojure for the
Brave and the True' book.


*** C/C++ Mode.
*** Python Mode.
** Experimental Code.

Code here is for testing before moving into other locations.

*** Paredit.

This is 'bigged up' in 'Clojure for the Brave and the True', so I am
adding it for experimental use.

#+BEGIN_SRC emacs-lisp
  (use-package paredit			; install paredit
    :ensure t
    :config (add-hook 'prog-mode-hook 'paredit-mode)
    :config (add-hook 'cider-repl-mode-hook #'paredit-mode)
    :config (add-hook 'LaTeX-mode-hook 'paredit-mode)
    :config (add-hook 'html-mode-hook 'paredit-mode))
#+END_SRC

**** TODO Investigate how paredit is used.

*** Speed Typing.

A typing trainer built into Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package speed-type
    :ensure t)
#+END_SRC
** Stuff To Investigate.
